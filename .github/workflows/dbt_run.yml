name: dbt Run

on:
  schedule:
    - cron: "0 8 * * *"
  workflow_dispatch:

jobs:
  run_dbt:
    name: Run dbt
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
        
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Checkout dbt repo
        uses: actions/checkout@v3
        with:
          path: levergreen_dbt

      - name: Install dbt dependencies
        run: dbt deps

      - name: Run dbt models
        id: run_dbt_step
        run: dbt run
        env:
          PG_DATABASE: ${{ secrets.PG_DATABASE }}
          PG_HOST: ${{ secrets.PG_HOST }}
          PG_PASSWORD: ${{ secrets.PG_PASSWORD }}
          PG_USER: ${{ secrets.PG_USER }}

      - name: Test dbt models
        run: dbt test
        env:
          PG_DATABASE: ${{ secrets.PG_DATABASE }}
          PG_HOST: ${{ secrets.PG_HOST }}
          PG_PASSWORD: ${{ secrets.PG_PASSWORD }}
          PG_USER: ${{ secrets.PG_USER }}
      
      - name: Check Freshness of dbt models
        if: ${{ always() && steps.run_dbt_step.conclusion == 'success'}}
        run: dbt source freshness
        env:
          PG_DATABASE: ${{ secrets.PG_DATABASE }}
          PG_HOST: ${{ secrets.PG_HOST }}
          PG_PASSWORD: ${{ secrets.PG_PASSWORD }}
          PG_USER: ${{ secrets.PG_USER }}

      - name: Run Elementary
        if: ${{ always() && steps.run_dbt_step.conclusion == 'success'}}
        uses: elementary-data/run-elementary-action@v1.11
        env:
          PG_DATABASE: ${{ secrets.PG_DATABASE }}
          PG_HOST: ${{ secrets.PG_HOST }}
          PG_PASSWORD: ${{ secrets.PG_PASSWORD }}
          PG_USER: ${{ secrets.PG_USER }}
        with:
          warehouse-type: postgres
          edr-command:
            edr send-report
              --aws-access-key-id "${{ secrets.AWS_ACCESS_KEY_ID }}"
              --aws-secret-access-key "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
              --s3-bucket-name "${{ secrets.ELEMENTARY_S3_BUCKET }}"
              --update-bucket-website "true"

