{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.7", "generated_at": "2024-12-02T12:14:39.973296Z", "invocation_id": "b0a8f965-9036-4a70-ab1a-cebb994f5e8b", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-02T12:13:12.054947Z", "completed_at": "2024-12-02T12:13:12.111188Z"}, {"name": "execute", "started_at": "2024-12-02T12:13:12.132875Z", "completed_at": "2024-12-02T12:13:13.955468Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.91611909866333, "adapter_response": {"_message": "INSERT 0 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0 0", "failures": null, "unique_id": "model.elementary.data_monitoring_metrics", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n    \n    select * from (\n            select\n            \n                \n        cast('dummy_string' as varchar(4096)) as id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as full_table_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as column_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as metric_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as metric_type\n\n,\n                \n        cast(123456789.99 as float) as metric_value\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as source_value\n\n,\n                cast('2091-02-17' as timestamp) as bucket_start\n\n,\n                cast('2091-02-17' as timestamp) as bucket_end\n\n,\n                \n        cast(123456789 as integer) as bucket_duration_hours\n\n,\n                cast('2091-02-17' as timestamp) as updated_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as dimension\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as dimension_value\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as metric_properties\n\n,\n                cast('2091-02-17' as timestamp) as created_at\n\n\n        ) as empty_table\n        where 1 = 0\n", "relation_name": "\"postgres\".\"elementary\".\"data_monitoring_metrics\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-02T12:13:12.082125Z", "completed_at": "2024-12-02T12:13:12.094170Z"}, {"name": "execute", "started_at": "2024-12-02T12:13:12.095244Z", "completed_at": "2024-12-02T12:13:14.000989Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.9826109409332275, "adapter_response": {"_message": "INSERT 0 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0 0", "failures": null, "unique_id": "model.elementary.dbt_invocations", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('this_is_just_a_long_dummy_string' as text) as invocation_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as job_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as job_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as job_run_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as run_started_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as run_completed_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as generated_at\n\n,\n                cast('2091-02-17' as timestamp) as created_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as command\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as dbt_version\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as elementary_version\n\n,\n                \n        cast (True as boolean) as full_refresh\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as invocation_vars\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as vars\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as target_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as target_database\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as target_schema\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as target_profile_name\n\n,\n                \n        cast(123456789 as integer) as threads\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as selected\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as yaml_selector\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as project_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as project_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as env\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as env_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as cause_category\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as cause\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as pull_request_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as git_sha\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as orchestrator\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as dbt_user\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as job_url\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as job_run_url\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as account_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as target_adapter_specific_fields\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "\"postgres\".\"elementary\".\"dbt_invocations\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-02T12:13:12.073917Z", "completed_at": "2024-12-02T12:13:12.110564Z"}, {"name": "execute", "started_at": "2024-12-02T12:13:12.122649Z", "completed_at": "2024-12-02T12:13:14.280538Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.2278778553009033, "adapter_response": {"_message": "INSERT 0 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0 0", "failures": null, "unique_id": "model.elementary.dbt_exposures", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('dummy_string' as varchar(4096)) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as maturity\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as type\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as owner_email\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as owner_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as url\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as depends_on_macros\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as depends_on_nodes\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as depends_on_columns\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as description\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as meta\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as package_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as original_path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as generated_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as metadata_hash\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as label\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as raw_queries\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "\"postgres\".\"elementary\".\"dbt_exposures\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-02T12:13:12.066647Z", "completed_at": "2024-12-02T12:13:12.094697Z"}, {"name": "execute", "started_at": "2024-12-02T12:13:12.100369Z", "completed_at": "2024-12-02T12:13:14.465069Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 2.413374900817871, "adapter_response": {"_message": "INSERT 0 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0 0", "failures": null, "unique_id": "model.elementary.dbt_columns", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('dummy_string' as varchar(4096)) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as parent_unique_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as data_type\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as meta\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as database_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as schema_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as table_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as description\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as resource_type\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as generated_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as metadata_hash\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "\"postgres\".\"elementary\".\"dbt_columns\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-02T12:13:14.285641Z", "completed_at": "2024-12-02T12:13:14.295824Z"}, {"name": "execute", "started_at": "2024-12-02T12:13:14.296371Z", "completed_at": "2024-12-02T12:13:15.761396Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.4929029941558838, "adapter_response": {"_message": "INSERT 0 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0 0", "failures": null, "unique_id": "model.elementary.dbt_run_results", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('this_is_just_a_long_dummy_string' as text) as model_execution_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as invocation_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as generated_at\n\n,\n                cast('2091-02-17' as timestamp) as created_at\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as message\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as status\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as resource_type\n\n,\n                \n        cast(123456789.99 as float) as execution_time\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as execute_started_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as execute_completed_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as compile_started_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as compile_completed_at\n\n,\n                \n        cast(31474836478 as bigint) as rows_affected\n\n,\n                \n        cast (True as boolean) as full_refresh\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as compiled_code\n\n,\n                \n        cast(31474836478 as bigint) as failures\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as query_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as thread_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as materialization\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as adapter_response\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "\"postgres\".\"elementary\".\"dbt_run_results\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-02T12:13:14.124032Z", "completed_at": "2024-12-02T12:13:14.158725Z"}, {"name": "execute", "started_at": "2024-12-02T12:13:14.162332Z", "completed_at": "2024-12-02T12:13:15.829361Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.7733685970306396, "adapter_response": {"_message": "INSERT 0 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0 0", "failures": null, "unique_id": "model.elementary.dbt_metrics", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('dummy_string' as varchar(4096)) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as label\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as model\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as type\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as sql\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as timestamp\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as filters\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as time_grains\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as dimensions\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as depends_on_macros\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as depends_on_nodes\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as description\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as meta\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as package_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as original_path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as generated_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as metadata_hash\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "\"postgres\".\"elementary\".\"dbt_metrics\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-02T12:13:14.470057Z", "completed_at": "2024-12-02T12:13:14.478685Z"}, {"name": "execute", "started_at": "2024-12-02T12:13:14.479380Z", "completed_at": "2024-12-02T12:13:16.148706Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.6802818775177002, "adapter_response": {"_message": "INSERT 0 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0 0", "failures": null, "unique_id": "model.elementary.dbt_seeds", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('dummy_string' as varchar(4096)) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as alias\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as checksum\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as meta\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as owner\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as database_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as schema_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as description\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as package_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as original_path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as generated_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as metadata_hash\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "\"postgres\".\"elementary\".\"dbt_seeds\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-02T12:13:14.172509Z", "completed_at": "2024-12-02T12:13:14.184208Z"}, {"name": "execute", "started_at": "2024-12-02T12:13:14.185036Z", "completed_at": "2024-12-02T12:13:16.989066Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 2.8281142711639404, "adapter_response": {"_message": "INSERT 0 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0 0", "failures": null, "unique_id": "model.elementary.dbt_models", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('dummy_string' as varchar(4096)) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as alias\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as checksum\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as materialization\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as meta\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as owner\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as database_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as schema_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as depends_on_macros\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as depends_on_nodes\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as description\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as package_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as original_path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as patch_path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as generated_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as metadata_hash\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as unique_key\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as incremental_strategy\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "\"postgres\".\"elementary\".\"dbt_models\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-02T12:13:15.833900Z", "completed_at": "2024-12-02T12:13:15.841625Z"}, {"name": "execute", "started_at": "2024-12-02T12:13:15.842102Z", "completed_at": "2024-12-02T12:13:17.377548Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.5452425479888916, "adapter_response": {"_message": "INSERT 0 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0 0", "failures": null, "unique_id": "model.elementary.dbt_source_freshness_results", "compiled": true, "compiled_code": "\n\n\n    select * from (\n            select\n            \n                \n        cast('dummy_string' as varchar(4096)) as source_freshness_execution_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as max_loaded_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as snapshotted_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as generated_at\n\n,\n                cast('2091-02-17' as timestamp) as created_at\n\n,\n                \n        cast(123456789.99 as float) as max_loaded_at_time_ago_in_s\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as status\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as error\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as compile_started_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as compile_completed_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as execute_started_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as execute_completed_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as invocation_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as warn_after\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as error_after\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as filter\n\n\n        ) as empty_table\n        where 1 = 0\n", "relation_name": "\"postgres\".\"elementary\".\"dbt_source_freshness_results\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-02T12:13:15.796321Z", "completed_at": "2024-12-02T12:13:15.805627Z"}, {"name": "execute", "started_at": "2024-12-02T12:13:15.806102Z", "completed_at": "2024-12-02T12:13:17.413241Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.619739294052124, "adapter_response": {"_message": "INSERT 0 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0 0", "failures": null, "unique_id": "model.elementary.dbt_snapshots", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('dummy_string' as varchar(4096)) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as alias\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as checksum\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as materialization\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as meta\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as owner\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as database_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as schema_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as depends_on_macros\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as depends_on_nodes\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as description\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as package_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as original_path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as patch_path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as generated_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as metadata_hash\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as unique_key\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as incremental_strategy\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "\"postgres\".\"elementary\".\"dbt_snapshots\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-02T12:13:16.153595Z", "completed_at": "2024-12-02T12:13:16.162679Z"}, {"name": "execute", "started_at": "2024-12-02T12:13:16.163148Z", "completed_at": "2024-12-02T12:13:17.762519Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.6105625629425049, "adapter_response": {"_message": "INSERT 0 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0 0", "failures": null, "unique_id": "model.elementary.dbt_sources", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('dummy_string' as varchar(4096)) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as database_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as schema_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as source_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as identifier\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as loaded_at_field\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as freshness_warn_after\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as freshness_error_after\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as freshness_filter\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as freshness_description\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as relation_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as meta\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as owner\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as package_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as original_path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as path\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as source_description\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as description\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as generated_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as metadata_hash\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "\"postgres\".\"elementary\".\"dbt_sources\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-02T12:13:17.418217Z", "completed_at": "2024-12-02T12:13:17.422546Z"}, {"name": "execute", "started_at": "2024-12-02T12:13:17.423011Z", "completed_at": "2024-12-02T12:13:18.775414Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.3644037246704102, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": "SELECT 1", "failures": null, "unique_id": "model.elementary.metadata", "compiled": true, "compiled_code": "\n\nSELECT\n    '0.16.2' as dbt_pkg_version", "relation_name": "\"postgres\".\"elementary\".\"metadata\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-02T12:13:17.382287Z", "completed_at": "2024-12-02T12:13:17.392702Z"}, {"name": "execute", "started_at": "2024-12-02T12:13:17.393184Z", "completed_at": "2024-12-02T12:13:19.016556Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.638305902481079, "adapter_response": {"_message": "INSERT 0 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0 0", "failures": null, "unique_id": "model.elementary.elementary_test_results", "compiled": true, "compiled_code": "\n\n\n    select * from (\n            select\n            \n                \n        cast('this_is_just_a_long_dummy_string' as text) as id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as data_issue_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as test_execution_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as test_unique_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as model_unique_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as invocation_id\n\n,\n                cast('2091-02-17' as timestamp) as detected_at\n\n,\n                cast('2091-02-17' as timestamp) as created_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as database_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as schema_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as table_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as column_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as test_type\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as test_sub_type\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as test_results_description\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as owners\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as test_results_query\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as other\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as test_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as test_params\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as severity\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as status\n\n,\n                \n        cast(31474836478 as bigint) as failures\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as test_short_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as test_alias\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as result_rows\n\n,\n                \n        cast(31474836478 as bigint) as failed_row_count\n\n\n        ) as empty_table\n        where 1 = 0\n", "relation_name": "\"postgres\".\"elementary\".\"elementary_test_results\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-02T12:13:16.993936Z", "completed_at": "2024-12-02T12:13:17.008841Z"}, {"name": "execute", "started_at": "2024-12-02T12:13:17.009329Z", "completed_at": "2024-12-02T12:13:19.132182Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 2.140009880065918, "adapter_response": {"_message": "INSERT 0 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0 0", "failures": null, "unique_id": "model.elementary.dbt_tests", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('dummy_string' as varchar(4096)) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as database_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as schema_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as short_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as alias\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as test_column_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as severity\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as warn_if\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as error_if\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as test_params\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as test_namespace\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as test_original_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as model_tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as model_owners\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as meta\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as depends_on_macros\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as depends_on_nodes\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as parent_model_unique_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as description\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as package_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as type\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as original_path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as generated_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as metadata_hash\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as quality_dimension\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "\"postgres\".\"elementary\".\"dbt_tests\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-02T12:13:17.767450Z", "completed_at": "2024-12-02T12:13:17.774899Z"}, {"name": "execute", "started_at": "2024-12-02T12:13:17.775376Z", "completed_at": "2024-12-02T12:13:19.399439Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.6336348056793213, "adapter_response": {"_message": "INSERT 0 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0 0", "failures": null, "unique_id": "model.elementary.schema_columns_snapshot", "compiled": true, "compiled_code": "\n\n\n    select * from (\n            select\n            \n                \n        cast('dummy_string' as varchar(4096)) as column_state_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as full_column_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as full_table_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as column_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as data_type\n\n,\n                \n        cast (True as boolean) as is_new\n\n,\n                cast('2091-02-17' as timestamp) as detected_at\n\n,\n                cast('2091-02-17' as timestamp) as created_at\n\n\n        ) as empty_table\n        where 1 = 0\n", "relation_name": "\"postgres\".\"elementary\".\"schema_columns_snapshot\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-02T12:13:18.914977Z", "completed_at": "2024-12-02T12:13:18.918855Z"}, {"name": "execute", "started_at": "2024-12-02T12:13:18.919329Z", "completed_at": "2024-12-02T12:13:20.212963Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.2998254299163818, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.levergreen_dbt.stg_ashby__job_departments", "compiled": true, "compiled_code": "with ashby_departments_by_levergreen_id as (\n    select\n        *,\n        to_timestamp(created_at) at time zone 'UTC' as created_at_utc,\n        to_timestamp(updated_at) at time zone 'UTC' as updated_at_utc,\n        cast(existing_json_used as boolean) as uses_existing, \n        row_number() over(\n            partition by levergreen_id\n            order by\n                updated_at\n        ) as earliest_levergreen_id_row\n    from\n        \"postgres\".\"public\".\"ashby_job_departments\"\n)\nselect\n    id,\n    levergreen_id,\n    created_at_utc,\n    updated_at_utc,\n    DATE(created_at_utc) as created_date_utc,\n    DATE(updated_at_utc) as updated_date_utc,\n    ashby_job_board_source as source,\n    uses_existing,\n    raw_json_file_location,\n    run_hash,\n    company_name,\n    department_id,\n    department_name,\n    parent_department_id,\n    'ashby' as job_board\nfrom\n    ashby_departments_by_levergreen_id\nwhere\n    earliest_levergreen_id_row = 1", "relation_name": "\"postgres\".\"public\".\"stg_ashby__job_departments\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-02T12:13:19.027883Z", "completed_at": "2024-12-02T12:13:19.031691Z"}, {"name": "execute", "started_at": "2024-12-02T12:13:19.032158Z", "completed_at": "2024-12-02T12:13:20.301540Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.2753376960754395, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.levergreen_dbt.stg_ashby__job_locations", "compiled": true, "compiled_code": "with ashby_departments_by_levergreen_id as (\n    select\n        *,\n        to_timestamp(created_at) at time zone 'UTC' as created_at_utc,\n        to_timestamp(updated_at) at time zone 'UTC' as updated_at_utc,\n        cast(existing_json_used as boolean) as uses_existing, \n        row_number() over(\n            partition by levergreen_id\n            order by\n                updated_at\n        ) as earliest_levergreen_id_row\n    from\n        \"postgres\".\"public\".\"ashby_job_locations\"\n)\nselect\n    id,\n    levergreen_id,\n    created_at_utc,\n    updated_at_utc,\n    DATE(created_at_utc) as created_date_utc,\n    DATE(updated_at_utc) as updated_date_utc,\n    ashby_job_board_source as source,\n    uses_existing,\n    raw_json_file_location,\n    run_hash,\n    company_name,\n    opening_id, \n    secondary_location_id,\n    secondary_location_name,\n    'ashby' as job_board\nfrom\n    ashby_departments_by_levergreen_id\nwhere\n    earliest_levergreen_id_row = 1", "relation_name": "\"postgres\".\"public\".\"stg_ashby__job_locations\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-02T12:13:19.137126Z", "completed_at": "2024-12-02T12:13:19.142588Z"}, {"name": "execute", "started_at": "2024-12-02T12:13:19.143071Z", "completed_at": "2024-12-02T12:13:20.419234Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.2837722301483154, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.levergreen_dbt.stg_ashby__jobs_outline", "compiled": true, "compiled_code": "with convert_unix_to_ts as (\n    select \n        *,\n        to_timestamp(created_at) at time zone 'UTC' as created_at_utc,\n        to_timestamp(updated_at) at time zone 'UTC' as updated_at_utc\n    from \"postgres\".\"public\".\"ashby_jobs_outline\"\n),\n\nconvert_ts_to_date as (\n    select\n        *,\n        date(created_at_utc) as created_date_utc,\n        date(updated_at_utc) as updated_date_utc,\n        row_number() over(\n            partition by levergreen_id\n            order by\n                updated_at\n        ) as earliest_levergreen_id_row\n    from convert_unix_to_ts\n),\n\nashby_outlines_by_levergreen_id as (\n    select\n        *,\n        'ashby' as job_board,\n        cast(existing_json_used as boolean) as uses_existing,\n        row_number() over(\n            partition by opening_link, updated_date_utc\n            order by\n                updated_at\n        ) as earliest_opening_link_row\n    from convert_ts_to_date\n    where earliest_levergreen_id_row = 1\n)\n\nselect\n    concat(job_board,'_',id) as id,\n    levergreen_id,\n    created_at_utc,\n    updated_at_utc,\n    created_date_utc,\n    updated_date_utc,\n    ashby_job_board_source as source,\n    uses_existing,\n    raw_json_file_location,\n    run_hash,\n    company_name,\n    opening_id,\n    opening_name as opening_title,\n    department_id, \n    location_id, \n    location_name, \n    employment_type, \n    compensation_tier,\n    opening_link as full_opening_link,\n    job_board\nfrom\n    ashby_outlines_by_levergreen_id\nwhere\n    earliest_opening_link_row = 1", "relation_name": "\"postgres\".\"public\".\"stg_ashby__jobs_outline\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-02T12:13:19.404316Z", "completed_at": "2024-12-02T12:13:19.408752Z"}, {"name": "execute", "started_at": "2024-12-02T12:13:19.409224Z", "completed_at": "2024-12-02T12:13:20.654528Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.2518773078918457, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.levergreen_dbt.stg_greenhouse__job_departments", "compiled": true, "compiled_code": "with greenhouse_departments_by_levergreen_id as (\n    select\n        *,\n        to_timestamp(created_at) at time zone 'UTC' as created_at_utc,\n        to_timestamp(updated_at) at time zone 'UTC' as updated_at_utc,\n        cast(existing_html_used as boolean) as uses_existing, \n        row_number() over(\n            partition by levergreen_id\n            order by\n                updated_at\n        ) as earliest_levergreen_id_row,\n        row_number() over(\n            partition by department_id, run_hash\n            order by\n                updated_at\n        ) as earliest_department_id_row\n    from\n        \"postgres\".\"public\".\"greenhouse_job_departments\"\n    where updated_at > 1684600000\n)\n\nselect\n    id,\n    levergreen_id,\n    created_at_utc,\n    updated_at_utc,\n    DATE(created_at_utc) as created_date_utc,\n    DATE(updated_at_utc) as updated_date_utc,\n    source,\n    uses_existing,\n    raw_html_file_location,\n    run_hash,\n    company_name,\n    department_id,\n    department_category,\n    department_name,\n    split_part(source,'.',2) as job_board\nfrom\n    greenhouse_departments_by_levergreen_id\nwhere\n    earliest_levergreen_id_row = 1 and\n    earliest_department_id_row = 1", "relation_name": "\"postgres\".\"public\".\"stg_greenhouse__job_departments\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-02T12:13:20.217757Z", "completed_at": "2024-12-02T12:13:20.224827Z"}, {"name": "execute", "started_at": "2024-12-02T12:13:20.225311Z", "completed_at": "2024-12-02T12:13:21.479688Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.2683193683624268, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.levergreen_dbt.stg_greenhouse__jobs_outline", "compiled": true, "compiled_code": "with convert_unix_to_ts as (\n    select \n        *,\n        split_part(source, '/', 4) = 'embed'\n            or split_part(split_part(source,'/',3),'.',1) = 'job-boards' as is_full_link, \n        to_timestamp(created_at) at time zone 'UTC' as created_at_utc,\n        to_timestamp(updated_at) at time zone 'UTC' as updated_at_utc\n    from \"postgres\".\"public\".\"greenhouse_jobs_outline\"\n    \n),\n\nconvert_ts_to_date as (\n    select\n        *,\n        date(created_at_utc) as created_date_utc,\n        date(updated_at_utc) as updated_date_utc,\n        row_number() over(\n            partition by levergreen_id\n            order by\n                updated_at\n        ) as earliest_levergreen_id_row\n    from convert_unix_to_ts\n),\n\ngreenhouse_outlines_by_levergreen_id as (\n    select\n        *,\n        split_part(source,'.',2) as job_board,\n        case \n            when is_full_link then opening_link\n            else concat(source,'/',split_part(opening_link,'/',3),'/',split_part(opening_link,'/',4)) \n        end as full_opening_link,\n        case\n            when is_full_link and split_part(source, '/', 4) = 'embed' then split_part(source,'=',-1)\n            else split_part(source,'/',-1)\n        end as company_name,\n        cast(existing_html_used as boolean) as uses_existing,\n        row_number() over(\n            partition by opening_link, updated_date_utc\n            order by\n                updated_at\n        ) as earliest_opening_link_row\n    from convert_ts_to_date\n    where earliest_levergreen_id_row = 1\n)\n\nselect\n    concat(job_board,'_',id) as id,\n    levergreen_id,\n    created_at_utc,\n    updated_at_utc,\n    created_date_utc,\n    updated_date_utc,\n    source,\n    uses_existing,\n    raw_html_file_location,\n    run_hash,\n    company_name,\n    coalesce(department_ids, 'No Dept') as department_ids,\n    location,\n    office_ids,\n    full_opening_link,\n    opening_title,\n    job_board\nfrom\n    greenhouse_outlines_by_levergreen_id\nwhere\n    earliest_opening_link_row = 1", "relation_name": "\"postgres\".\"public\".\"stg_greenhouse__jobs_outline\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-02T12:13:20.306492Z", "completed_at": "2024-12-02T12:13:20.310437Z"}, {"name": "execute", "started_at": "2024-12-02T12:13:20.310921Z", "completed_at": "2024-12-02T12:13:21.581000Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.2762370109558105, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.levergreen_dbt.stg_lever__jobs_outline", "compiled": true, "compiled_code": "with convert_unix_to_ts as (\n    select \n        *,\n        to_timestamp(created_at) at time zone 'UTC' as created_at_utc,\n        to_timestamp(updated_at) at time zone 'UTC' as updated_at_utc\n    from \"postgres\".\"public\".\"lever_jobs_outline\"\n    \n),\n\nconvert_ts_to_date as (\n    select\n        *,\n        date(created_at_utc) as created_date_utc,\n        date(updated_at_utc) as updated_date_utc,\n        row_number() over(\n            partition by levergreen_id\n            order by\n                updated_at\n        ) as earliest_levergreen_id_row\n    from convert_unix_to_ts\n),\n\nlever_outlines_by_levergreen_id as (\n    select\n        *,\n        split_part(source,'.',2) as job_board,\n        cast(existing_html_used as boolean) as uses_existing, \n        row_number() over(\n            partition by opening_link, updated_date_utc\n            order by\n                updated_at\n        ) as earliest_opening_link_row\n    from convert_ts_to_date\n    where earliest_levergreen_id_row = 1\n)\n\nselect\n    concat(job_board,'_',id) as id,\n    levergreen_id,\n    created_at_utc,\n    updated_at_utc,\n    created_date_utc,\n    updated_date_utc,\n    source,\n    uses_existing,\n    raw_html_file_location, \n    run_hash,\n    department_names,\n    location,\n    workplace_type,\n    opening_link as full_opening_link,\n    opening_title,\n    company_name,\n    job_board\nfrom\n    lever_outlines_by_levergreen_id\nwhere\n    earliest_opening_link_row = 1", "relation_name": "\"postgres\".\"public\".\"stg_lever__jobs_outline\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-02T12:13:20.423919Z", "completed_at": "2024-12-02T12:13:20.427416Z"}, {"name": "execute", "started_at": "2024-12-02T12:13:20.427883Z", "completed_at": "2024-12-02T12:13:21.722727Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.3015758991241455, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.levergreen_dbt.stg_rippling__jobs_outline", "compiled": true, "compiled_code": "select \n    'rippling_' || id as id,\n    job_id as levergreen_id,\n    date(created_at) as created_date_utc,\n    date(created_at) as updated_date_utc,\n    api_endpoint as source,\n    board_token as company_name,\n    false as uses_existing,\n    location,\n    url as full_opening_link, \n    title as opening_title,\n    lower(location) like '%remote%' as is_remote,\n    department as primary_department,\n    null as secondary_department,\n    null as tertiary_department,\n    null as quaternary_department,\n    run_hash,\n    'rippling' as job_board_provider\nfrom \"postgres\".\"public\".\"rippling_jobs_outline\"", "relation_name": "\"postgres\".\"public\".\"stg_rippling__jobs_outline\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-02T12:13:20.659610Z", "completed_at": "2024-12-02T12:13:20.667359Z"}, {"name": "execute", "started_at": "2024-12-02T12:13:20.667845Z", "completed_at": "2024-12-02T12:13:22.017016Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.3590607643127441, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.elementary.metrics_anomaly_score", "compiled": true, "compiled_code": "\n\nwith data_monitoring_metrics as (\n\n    select * from \"postgres\".\"elementary\".\"data_monitoring_metrics\"\n\n),\n\ntime_window_aggregation as (\n\n    select\n        id,\n        full_table_name,\n        column_name,\n        dimension,\n        dimension_value,\n        metric_name,\n        metric_value,\n        source_value,\n        bucket_start,\n        bucket_end,\n        bucket_duration_hours,\n        updated_at,\n        avg(metric_value) over (partition by metric_name, full_table_name, column_name order by bucket_start asc rows between unbounded preceding and current row) as training_avg,\n        stddev(metric_value) over (partition by metric_name, full_table_name, column_name order by bucket_start asc rows between unbounded preceding and current row) as training_stddev,\n        count(metric_value) over (partition by metric_name, full_table_name, column_name order by bucket_start asc rows between unbounded preceding and current row) as training_set_size,\n        last_value(bucket_end) over (partition by metric_name, full_table_name, column_name order by bucket_start asc rows between unbounded preceding and current row) training_end,\n        first_value(bucket_end) over (partition by metric_name, full_table_name, column_name order by bucket_start asc rows between unbounded preceding and current row) as training_start\n    from data_monitoring_metrics\n    group by 1,2,3,4,5,6,7,8,9,10,11,12\n),\n\nmetrics_anomaly_score as (\n\n    select\n        id,\n        full_table_name,\n        column_name,\n        dimension,\n        dimension_value,\n        metric_name,\n        case\n            when training_stddev is null then null\n            when training_stddev = 0 then 0\n            else (metric_value - training_avg) / (training_stddev)\n        end as anomaly_score,\n        metric_value as latest_metric_value,\n        bucket_start,\n        bucket_end,\n        training_avg,\n        training_stddev,\n        training_start,\n        training_end,\n        training_set_size,\n        max(updated_at) as updated_at\n    from time_window_aggregation\n        where\n            metric_value is not null\n            and training_avg is not null\n            and bucket_end >= \n    cast(date_trunc('day', \n    current_timestamp::timestamp\n) as timestamp) + cast(-7 as integer) * INTERVAL '1 day'\n\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15\n    order by bucket_end desc\n\n\n),\n\nfinal as (\n\n    select\n        id,\n        full_table_name,\n        column_name,\n        dimension,\n        dimension_value,\n        metric_name,\n        anomaly_score,\n        latest_metric_value,\n        bucket_start,\n        bucket_end,\n        training_avg,\n        training_stddev,\n        training_start,\n        training_end,\n        training_set_size,\n        updated_at,\n        case\n            when abs(anomaly_score) > 3 then true\n            else false end\n        as is_anomaly\n    from metrics_anomaly_score\n)\n\nselect * from final", "relation_name": "\"postgres\".\"elementary\".\"metrics_anomaly_score\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-02T12:13:21.489396Z", "completed_at": "2024-12-02T12:13:21.494771Z"}, {"name": "execute", "started_at": "2024-12-02T12:13:21.495234Z", "completed_at": "2024-12-02T12:13:22.757356Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.269627571105957, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.elementary.monitors_runs", "compiled": true, "compiled_code": "\n\nwith data_monitoring_metrics as (\n\n    select * from \"postgres\".\"elementary\".\"data_monitoring_metrics\"\n\n),\n\nmax_bucket_end as (\n\n    select full_table_name,\n           column_name,\n           metric_name,\n           metric_properties,\n           max(bucket_end) as last_bucket_end,\n           min(bucket_end) as first_bucket_end\n    from data_monitoring_metrics\n    group by 1,2,3,4\n\n)\n\nselect * from max_bucket_end", "relation_name": "\"postgres\".\"elementary\".\"monitors_runs\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-02T12:13:21.627163Z", "completed_at": "2024-12-02T12:13:21.635373Z"}, {"name": "execute", "started_at": "2024-12-02T12:13:21.635855Z", "completed_at": "2024-12-02T12:13:22.995156Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.3697314262390137, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.elementary.job_run_results", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith jobs as (\n  select\n    job_name,\n    job_id,\n    job_run_id,\n    \nmin(cast(run_started_at as timestamp))\n as job_run_started_at,\n    \nmax(cast(run_completed_at as timestamp))\n as job_run_completed_at,\n    \n    \n        (\n        (\n        (\n        ((\nmax(cast(run_completed_at as timestamp))\n)::date - (\nmin(cast(run_started_at as timestamp))\n)::date)\n     * 24 + date_part('hour', (\nmax(cast(run_completed_at as timestamp))\n)::timestamp) - date_part('hour', (\nmin(cast(run_started_at as timestamp))\n)::timestamp))\n     * 60 + date_part('minute', (\nmax(cast(run_completed_at as timestamp))\n)::timestamp) - date_part('minute', (\nmin(cast(run_started_at as timestamp))\n)::timestamp))\n     * 60 + floor(date_part('second', (\nmax(cast(run_completed_at as timestamp))\n)::timestamp)) - floor(date_part('second', (\nmin(cast(run_started_at as timestamp))\n)::timestamp)))\n    \n as job_run_execution_time\n  from \"postgres\".\"elementary\".\"dbt_invocations\"\n  where job_id is not null\n  group by job_name, job_id, job_run_id\n)\n\nselect\n  job_name as name,\n  job_id as id,\n  job_run_id as run_id,\n  job_run_started_at as run_started_at,\n  job_run_completed_at as run_completed_at,\n  job_run_execution_time as run_execution_time\nfrom jobs", "relation_name": "\"postgres\".\"elementary\".\"job_run_results\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-02T12:13:21.729695Z", "completed_at": "2024-12-02T12:13:21.734509Z"}, {"name": "execute", "started_at": "2024-12-02T12:13:21.734976Z", "completed_at": "2024-12-02T12:13:23.007399Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.2799158096313477, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.elementary.seed_run_results", "compiled": true, "compiled_code": "\n\nwith dbt_run_results as (\n    select * from \"postgres\".\"elementary\".\"dbt_run_results\"\n),\n\ndbt_seeds as (\n    select * from \"postgres\".\"elementary\".\"dbt_seeds\"\n)\n\nSELECT\n    run_results.model_execution_id,\n    run_results.unique_id,\n    run_results.invocation_id,\n    run_results.query_id,\n    run_results.name,\n    run_results.generated_at,\n    run_results.status,\n    run_results.full_refresh,\n    run_results.message,\n    run_results.execution_time,\n    run_results.execute_started_at,\n    run_results.execute_completed_at,\n    run_results.compile_started_at,\n    run_results.compile_completed_at,\n    run_results.compiled_code,\n    run_results.adapter_response,\n    run_results.thread_id,\n    seeds.database_name,\n    seeds.schema_name,\n    run_results.materialization,\n    seeds.tags,\n    seeds.package_name,\n    seeds.path,\n    seeds.original_path,\n    seeds.owner,\n    seeds.alias\nFROM dbt_run_results run_results\nJOIN dbt_seeds seeds ON run_results.unique_id = seeds.unique_id", "relation_name": "\"postgres\".\"elementary\".\"seed_run_results\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-02T12:13:22.022006Z", "completed_at": "2024-12-02T12:13:22.028990Z"}, {"name": "execute", "started_at": "2024-12-02T12:13:22.029474Z", "completed_at": "2024-12-02T12:13:23.283830Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.263620138168335, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.elementary.model_run_results", "compiled": true, "compiled_code": "\n\nwith dbt_run_results as (\n    select * from \"postgres\".\"elementary\".\"dbt_run_results\"\n),\n\ndbt_models as (\n    select * from \"postgres\".\"elementary\".\"dbt_models\"\n)\n\nSELECT\n    run_results.model_execution_id,\n    run_results.unique_id,\n    run_results.invocation_id,\n    run_results.query_id,\n    run_results.name,\n    run_results.generated_at,\n    run_results.status,\n    run_results.full_refresh,\n    run_results.message,\n    run_results.execution_time,\n    run_results.execute_started_at,\n    run_results.execute_completed_at,\n    run_results.compile_started_at,\n    run_results.compile_completed_at,\n    run_results.compiled_code,\n    run_results.adapter_response,\n    run_results.thread_id,\n    models.database_name,\n    models.schema_name,\n    coalesce(run_results.materialization, models.materialization) as materialization,\n    models.tags,\n    models.package_name,\n    models.path,\n    models.original_path,\n    models.owner,\n    models.alias,\n    ROW_NUMBER() OVER (PARTITION BY run_results.unique_id ORDER BY run_results.generated_at DESC) AS model_invocation_reverse_index,\n    CASE WHEN FIRST_VALUE(invocation_id) OVER (PARTITION BY \n    date_trunc('day', cast(run_results.generated_at as timestamp))\n ORDER BY run_results.generated_at ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) = invocation_id\n              THEN TRUE\n              ELSE FALSE \n         END                                                               AS is_the_first_invocation_of_the_day,\n    CASE WHEN LAST_VALUE(invocation_id) OVER (PARTITION BY \n    date_trunc('day', cast(run_results.generated_at as timestamp))\n ORDER BY run_results.generated_at ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) = invocation_id\n              THEN TRUE\n              ELSE FALSE \n         END                                                               AS is_the_last_invocation_of_the_day\n    \nFROM dbt_run_results run_results\nJOIN dbt_models models ON run_results.unique_id = models.unique_id", "relation_name": "\"postgres\".\"elementary\".\"model_run_results\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-02T12:13:22.762327Z", "completed_at": "2024-12-02T12:13:22.768690Z"}, {"name": "execute", "started_at": "2024-12-02T12:13:22.769163Z", "completed_at": "2024-12-02T12:13:24.051233Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.290574550628662, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.elementary.snapshot_run_results", "compiled": true, "compiled_code": "\n\nwith dbt_run_results as (\n    select * from \"postgres\".\"elementary\".\"dbt_run_results\"\n),\n\ndbt_snapshots as (\n    select * from \"postgres\".\"elementary\".\"dbt_snapshots\"\n)\n\nSELECT\n    run_results.model_execution_id,\n    run_results.unique_id,\n    run_results.invocation_id,\n    run_results.query_id,\n    run_results.name,\n    run_results.generated_at,\n    run_results.status,\n    run_results.full_refresh,\n    run_results.message,\n    run_results.execution_time,\n    run_results.execute_started_at,\n    run_results.execute_completed_at,\n    run_results.compile_started_at,\n    run_results.compile_completed_at,\n    run_results.compiled_code,\n    run_results.adapter_response,\n    run_results.thread_id,\n    snapshots.database_name,\n    snapshots.schema_name,\n    coalesce(run_results.materialization, snapshots.materialization) as materialization,\n    snapshots.tags,\n    snapshots.package_name,\n    snapshots.path,\n    snapshots.original_path,\n    snapshots.owner,\n    snapshots.alias\nFROM dbt_run_results run_results\nJOIN dbt_snapshots snapshots ON run_results.unique_id = snapshots.unique_id", "relation_name": "\"postgres\".\"elementary\".\"snapshot_run_results\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-02T12:13:22.999958Z", "completed_at": "2024-12-02T12:13:23.007989Z"}, {"name": "execute", "started_at": "2024-12-02T12:13:23.009131Z", "completed_at": "2024-12-02T12:13:24.268349Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.2740695476531982, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.elementary.alerts_dbt_source_freshness", "compiled": true, "compiled_code": "\n\nwith results as (\n  select * from \"postgres\".\"elementary\".\"dbt_source_freshness_results\"\n),\n\nsources as (\n  select * from \"postgres\".\"elementary\".\"dbt_sources\"\n)\n\nselect\n  results.source_freshness_execution_id as alert_id,\n  results.max_loaded_at,\n  results.snapshotted_at,\n  cast(results.generated_at as timestamp) as detected_at,\n  results.max_loaded_at_time_ago_in_s,\n  results.status,\n  results.error,\n  results.warn_after,\n  results.error_after,\n  results.filter,\n  sources.unique_id,\n  sources.database_name,\n  sources.schema_name,\n  sources.source_name,\n  sources.identifier,\n  sources.tags,\n  sources.meta,\n  sources.owner,\n  sources.package_name,\n  sources.path,\n  -- These columns below are deprecated. We add them since this view\n  -- was used to be loaded into an incremental model with those columns, their names were later changed\n  -- and Databricks doesn't respect `on_schema_change = 'append_new_columns'` properly, as described here -\n  -- https://docs.databricks.com/en/delta/update-schema.html#automatic-schema-evolution-for-delta-lake-merge\n  results.error_after as freshness_error_after,\n  results.warn_after as freshness_warn_after,\n  results.filter as freshness_filter\nfrom results\njoin sources on results.unique_id = sources.unique_id\nwhere True and lower(status) != 'pass'", "relation_name": "\"postgres\".\"elementary\".\"alerts_dbt_source_freshness\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-02T12:13:23.019614Z", "completed_at": "2024-12-02T12:13:23.027172Z"}, {"name": "execute", "started_at": "2024-12-02T12:13:23.027751Z", "completed_at": "2024-12-02T12:13:24.296028Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.2800164222717285, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.elementary.alerts_anomaly_detection", "compiled": true, "compiled_code": "\n\nwith elementary_test_results as (\n    select * from \"postgres\".\"elementary\".\"elementary_test_results\"\n),\n\nalerts_anomaly_detection as (\n    select id as alert_id,\n           data_issue_id,\n           test_execution_id,\n           test_unique_id,\n           model_unique_id,\n           detected_at,\n           database_name,\n           schema_name,\n           table_name,\n           column_name,\n           test_type as alert_type,\n           test_sub_type as sub_type,\n           test_results_description as alert_description,\n           owners,\n           tags,\n           test_results_query as alert_results_query,\n           other,\n           test_name,\n           test_short_name,\n           test_params,\n           severity,\n           status,\n           result_rows\n        from elementary_test_results\n        where True and lower(status) != 'pass'and lower(status) != 'skipped'and test_type = 'anomaly_detection'\n)\n\nselect * from alerts_anomaly_detection", "relation_name": "\"postgres\".\"elementary\".\"alerts_anomaly_detection\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-02T12:13:23.288806Z", "completed_at": "2024-12-02T12:13:23.295226Z"}, {"name": "execute", "started_at": "2024-12-02T12:13:23.295698Z", "completed_at": "2024-12-02T12:13:24.571179Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.2840485572814941, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.elementary.alerts_dbt_tests", "compiled": true, "compiled_code": "\n\nwith elementary_test_results as (\n    select * from \"postgres\".\"elementary\".\"elementary_test_results\"\n),\n\nalerts_dbt_tests as (\n    select id as alert_id,\n           data_issue_id,\n           test_execution_id,\n           test_unique_id,\n           model_unique_id,\n           detected_at,\n           database_name,\n           schema_name,\n           table_name,\n           column_name,\n           test_type as alert_type,\n           test_sub_type as sub_type,\n           test_results_description as alert_description,\n           owners,\n           tags,\n           test_results_query as alert_results_query,\n           other,\n           test_name,\n           test_short_name,\n           test_params,\n           severity,\n           status,\n           result_rows\n        from elementary_test_results\n        where True and lower(status) != 'pass'   and lower(status) != 'skipped'  and test_type = 'dbt_test'\n)\n\nselect * from alerts_dbt_tests", "relation_name": "\"postgres\".\"elementary\".\"alerts_dbt_tests\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-02T12:13:24.056250Z", "completed_at": "2024-12-02T12:13:24.064114Z"}, {"name": "execute", "started_at": "2024-12-02T12:13:24.064617Z", "completed_at": "2024-12-02T12:13:25.380811Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.3263530731201172, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.elementary.alerts_schema_changes", "compiled": true, "compiled_code": "\n\n\nwith elementary_test_results as (\n    select * from \"postgres\".\"elementary\".\"elementary_test_results\"\n),\n\nalerts_schema_changes as (\n    select id as alert_id,\n           data_issue_id,\n           test_execution_id,\n           test_unique_id,\n           model_unique_id,\n           detected_at,\n           database_name,\n           schema_name,\n           table_name,\n           column_name,\n           test_type as alert_type,\n           test_sub_type as sub_type,\n           test_results_description as alert_description,\n           owners,\n           tags,\n           test_results_query as alert_results_query,\n           other,\n           test_name,\n           test_short_name,\n           test_params,\n           severity,\n           status,\n           result_rows\n        from elementary_test_results\n        where True and lower(status) != 'pass'and lower(status) != 'skipped'and test_type = 'schema_change'\n)\n\nselect * from alerts_schema_changes", "relation_name": "\"postgres\".\"elementary\".\"alerts_schema_changes\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-02T12:13:24.301041Z", "completed_at": "2024-12-02T12:13:24.306855Z"}, {"name": "execute", "started_at": "2024-12-02T12:13:24.307337Z", "completed_at": "2024-12-02T12:13:25.694849Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.3955717086791992, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.elementary.dbt_artifacts_hashes", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n  'dbt_models' as artifacts_model,\n   metadata_hash\nfrom \"postgres\".\"elementary\".\"dbt_models\"\n union all \n\nselect\n  'dbt_tests' as artifacts_model,\n   metadata_hash\nfrom \"postgres\".\"elementary\".\"dbt_tests\"\n union all \n\nselect\n  'dbt_sources' as artifacts_model,\n   metadata_hash\nfrom \"postgres\".\"elementary\".\"dbt_sources\"\n union all \n\nselect\n  'dbt_snapshots' as artifacts_model,\n   metadata_hash\nfrom \"postgres\".\"elementary\".\"dbt_snapshots\"\n union all \n\nselect\n  'dbt_metrics' as artifacts_model,\n   metadata_hash\nfrom \"postgres\".\"elementary\".\"dbt_metrics\"\n union all \n\nselect\n  'dbt_exposures' as artifacts_model,\n   metadata_hash\nfrom \"postgres\".\"elementary\".\"dbt_exposures\"\n union all \n\nselect\n  'dbt_seeds' as artifacts_model,\n   metadata_hash\nfrom \"postgres\".\"elementary\".\"dbt_seeds\"\n union all \n\nselect\n  'dbt_columns' as artifacts_model,\n   metadata_hash\nfrom \"postgres\".\"elementary\".\"dbt_columns\"\n\n\norder by metadata_hash", "relation_name": "\"postgres\".\"elementary\".\"dbt_artifacts_hashes\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-02T12:13:24.277761Z", "completed_at": "2024-12-02T12:13:24.286683Z"}, {"name": "execute", "started_at": "2024-12-02T12:13:24.287160Z", "completed_at": "2024-12-02T12:13:25.802593Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.5264496803283691, "adapter_response": {"_message": "INSERT 0 0", "code": "INSERT", "rows_affected": 0}, "message": "INSERT 0 0", "failures": null, "unique_id": "model.elementary.test_result_rows", "compiled": true, "compiled_code": "-- indexes are not supported in all warehouses, relevant to postgres only\n\n\n-- depends_on: \"postgres\".\"elementary\".\"elementary_test_results\"\nselect * from (\n            select\n            \n                \n        cast('this_is_just_a_long_dummy_string' as text) as elementary_test_results_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as text) as result_row\n\n,\n                cast('2091-02-17' as timestamp) as detected_at\n\n,\n                cast('2091-02-17' as timestamp) as created_at\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "\"postgres\".\"elementary\".\"test_result_rows\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-02T12:13:25.385689Z", "completed_at": "2024-12-02T12:13:25.400382Z"}, {"name": "execute", "started_at": "2024-12-02T12:13:25.400902Z", "completed_at": "2024-12-02T12:13:27.373990Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.9899492263793945, "adapter_response": {"_message": "SELECT 9489", "code": "SELECT", "rows_affected": 9489}, "message": "SELECT 9489", "failures": null, "unique_id": "model.levergreen_dbt.int_ashby_locations_expanded", "compiled": true, "compiled_code": "with job_locations as (\n    select * from \"postgres\".\"public\".\"stg_ashby__job_locations\"\n),\n\njobs_outline as (\n    select * from \"postgres\".\"public\".\"stg_ashby__jobs_outline\"\n),\n\nall_secondary_locations as (\n    select opening_id, run_hash, string_agg(secondary_location_name, ', ') as secondary_locations from job_locations\n    group by 1,2\n)\n\nselect\n    jobs_outline.id,\n    jobs_outline.opening_id,\n    case \n        when all_secondary_locations.secondary_locations is null\n            then jobs_outline.location_name\n        else concat(jobs_outline.location_name, ', ', all_secondary_locations.secondary_locations) \n    end as location\nfrom jobs_outline\nleft join all_secondary_locations on jobs_outline.opening_id = all_secondary_locations.opening_id\nand jobs_outline.run_hash = all_secondary_locations.run_hash", "relation_name": "\"postgres\".\"public\".\"int_ashby_locations_expanded\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-02T12:13:27.378937Z", "completed_at": "2024-12-02T12:13:27.385704Z"}, {"name": "execute", "started_at": "2024-12-02T12:13:27.386178Z", "completed_at": "2024-12-02T12:13:28.566092Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.1888246536254883, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.elementary.anomaly_threshold_sensitivity", "compiled": true, "compiled_code": "\n\nwith metrics_anomaly_score as (\n\n    select * from \"postgres\".\"elementary\".\"metrics_anomaly_score\"\n\n),\n\nscore_sensitivity as (\n\n    select\n        full_table_name,\n        column_name,\n        metric_name,\n        latest_metric_value,\n        training_avg as metric_avg,\n        training_stddev as metric_stddev,\n        anomaly_score,\n        case when abs(anomaly_score) >= 1.5 then true else false end as \"is_anomaly_1_5\",\n        case when abs(anomaly_score) >= 2 then true else false end as \"is_anomaly_2\",\n        case when abs(anomaly_score) >= 2.5 then true else false end as \"is_anomaly_2_5\",\n        case when abs(anomaly_score) >= 3 then true else false end as \"is_anomaly_3\",\n        case when abs(anomaly_score) >= 3.5 then true else false end as \"is_anomaly_3_5\",\n        case when abs(anomaly_score) >= 4 then true else false end as \"is_anomaly_4\",\n        case when abs(anomaly_score) >= 4.5 then true else false end as \"is_anomaly_4_5\"\n    from metrics_anomaly_score\n    where abs(anomaly_score) >= 1.5\n\n)\n\nselect * from score_sensitivity", "relation_name": "\"postgres\".\"elementary\".\"anomaly_threshold_sensitivity\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-02T12:13:28.570967Z", "completed_at": "2024-12-02T12:13:28.577659Z"}, {"name": "execute", "started_at": "2024-12-02T12:13:28.578136Z", "completed_at": "2024-12-02T12:13:29.731167Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.1618895530700684, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.elementary.alerts_dbt_models", "compiled": true, "compiled_code": "\n\nwith error_models as (\n  \n    select  model_execution_id,\n            unique_id,\n            invocation_id,\n            name,\n            generated_at,\n            status,\n            full_refresh,\n            message,\n            execution_time,\n            execute_started_at,\n            execute_completed_at,\n            compile_started_at,\n            compile_completed_at,\n            compiled_code,\n            database_name,\n            schema_name,\n            materialization,\n            tags,\n            package_name,\n            path,\n            original_path,\n            owner,\n            alias \n    from \"postgres\".\"elementary\".\"model_run_results\"\n  \n    union all\n  \n    select  model_execution_id,\n            unique_id,\n            invocation_id,\n            name,\n            generated_at,\n            status,\n            full_refresh,\n            message,\n            execution_time,\n            execute_started_at,\n            execute_completed_at,\n            compile_started_at,\n            compile_completed_at,\n            compiled_code,\n            database_name,\n            schema_name,\n            materialization,\n            tags,\n            package_name,\n            path,\n            original_path,\n            owner,\n            alias  \n  from \"postgres\".\"elementary\".\"snapshot_run_results\"\n)\n\n\nselect model_execution_id as alert_id,\n       unique_id,\n       cast(generated_at as timestamp) as detected_at,\n       database_name,\n       materialization,\n       path,\n       original_path,\n       schema_name,\n       message,\n       owner as owners,\n       tags,\n       alias,\n       status,\n       full_refresh\nfrom error_models\nwhere True and lower(status) != 'success'and lower(status) != 'skipped'", "relation_name": "\"postgres\".\"elementary\".\"alerts_dbt_models\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-02T12:13:24.577201Z", "completed_at": "2024-12-02T12:13:24.584048Z"}, {"name": "execute", "started_at": "2024-12-02T12:13:24.584543Z", "completed_at": "2024-12-02T12:13:36.153293Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 11.578356266021729, "adapter_response": {"_message": "SELECT 9489", "code": "SELECT", "rows_affected": 9489}, "message": "SELECT 9489", "failures": null, "unique_id": "model.levergreen_dbt.int_ashby_departments_expanded", "compiled": true, "compiled_code": "with job_departments as (\n    select \n        department_id,\n        department_name,\n        parent_department_id, \n        row_number() over(partition by department_id order by updated_at_utc desc) as rn\n    from \"postgres\".\"public\".\"stg_ashby__job_departments\"\n),\n\n\njob_departments_dedup as (\n    select * from job_departments where rn = 1\n),\n\njobs_outline as (\n    select id, opening_id, department_id from \"postgres\".\"public\".\"stg_ashby__jobs_outline\"\n),\n\njob_departments_joined as (\n    select\n    jobs_outline.id,\n    jobs_outline.opening_id, \n    coalesce(parent_department.department_name, posting_department.department_name) as primary_department,\n    case when parent_department.department_name is not null then posting_department.department_name end as secondary_department \n    from jobs_outline\n    left join job_departments_dedup posting_department on jobs_outline.department_id = posting_department.department_id\n    left join job_departments_dedup parent_department on posting_department.parent_department_id = parent_department.department_id\n)\n\nselect * from job_departments_joined", "relation_name": "\"postgres\".\"public\".\"int_ashby_departments_expanded\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-02T12:13:36.158358Z", "completed_at": "2024-12-02T12:13:36.164842Z"}, {"name": "execute", "started_at": "2024-12-02T12:13:36.165309Z", "completed_at": "2024-12-02T12:13:38.531981Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.3753554821014404, "adapter_response": {"_message": "SELECT 9489", "code": "SELECT", "rows_affected": 9489}, "message": "SELECT 9489", "failures": null, "unique_id": "model.levergreen_dbt.int_ashby_outline_finalized", "compiled": true, "compiled_code": "with jobs_outline as (\n    select * from \"postgres\".\"public\".\"stg_ashby__jobs_outline\"\n),\n\njob_locations_final as (\n    select * from \"postgres\".\"public\".\"int_ashby_locations_expanded\"\n),\n\njob_departments_final as (\n    select * from \"postgres\".\"public\".\"int_ashby_departments_expanded\"\n)\n\nselect distinct\n    jobs_outline.id,\n    jobs_outline.levergreen_id,\n    jobs_outline.created_date_utc,\n    jobs_outline.updated_date_utc,\n    jobs_outline.source,\n    jobs_outline.company_name,\n    jobs_outline.uses_existing,\n    job_locations_final.location,\n    jobs_outline.full_opening_link, \n    jobs_outline.opening_title,\n    lower(job_locations_final.location) like '%remote%' as is_remote,\n    job_departments_final.primary_department,\n    job_departments_final.secondary_department,\n    null as tertiary_department,\n    null as quaternary_department,\n    jobs_outline.run_hash,\n    jobs_outline.job_board\nfrom jobs_outline\ninner join job_locations_final on jobs_outline.id = job_locations_final.id\ninner join job_departments_final on jobs_outline.id = job_departments_final.id", "relation_name": "\"postgres\".\"public\".\"int_ashby_outline_finalized\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-02T12:13:25.700338Z", "completed_at": "2024-12-02T12:13:25.708690Z"}, {"name": "execute", "started_at": "2024-12-02T12:13:25.709169Z", "completed_at": "2024-12-02T12:13:48.973048Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 23.274990797042847, "adapter_response": {"_message": "SELECT 151520", "code": "SELECT", "rows_affected": 151520}, "message": "SELECT 151520", "failures": null, "unique_id": "model.levergreen_dbt.int_greenhouse_departments_expanded_with_outline", "compiled": true, "compiled_code": "with greenhouse_jobs_outline as (\n    select * from \"postgres\".\"public\".\"stg_greenhouse__jobs_outline\"\n),\n\ngreenhouse_job_departments as (\n    select * from \"postgres\".\"public\".\"stg_greenhouse__job_departments\"\n),\n\njobs_outline_unnested as (\n    select\n        greenhouse_jobs_outline.id,\n        greenhouse_jobs_outline.levergreen_id,\n        greenhouse_jobs_outline.created_date_utc,\n        greenhouse_jobs_outline.updated_date_utc,\n        greenhouse_jobs_outline.source,\n        greenhouse_jobs_outline.uses_existing,\n        greenhouse_jobs_outline.raw_html_file_location,\n        greenhouse_jobs_outline.run_hash,\n        greenhouse_jobs_outline.location,\n        greenhouse_jobs_outline.office_ids,\n        greenhouse_jobs_outline.full_opening_link, \n        greenhouse_jobs_outline.opening_title,\n        greenhouse_jobs_outline.job_board,\n        greenhouse_jobs_outline.company_name,\n        lower(greenhouse_jobs_outline.location) like '%remote%' as is_remote,\n        department_ids_unnested.department_id\n    from greenhouse_jobs_outline, unnest(string_to_array(department_ids, ',')) as department_ids_unnested(department_id)\n),\n\noutline_joined_to_depts as (\n    select \n        jobs_outline_unnested.*,\n        case \n            when greenhouse_job_departments.department_category = 'level-0' then greenhouse_job_departments.department_name \n            when jobs_outline_unnested.department_id = 'No Dept' then 'No Department' end as primary_department,\n        case when greenhouse_job_departments.department_category = 'level-1' then greenhouse_job_departments.department_name end as secondary_department,\n        case when greenhouse_job_departments.department_category = 'level-2' then greenhouse_job_departments.department_name end as tertiary_department,\n        case when greenhouse_job_departments.department_category = 'level-3' then greenhouse_job_departments.department_name end as quaternary_department\n    from jobs_outline_unnested\n    left join greenhouse_job_departments on jobs_outline_unnested.source = greenhouse_job_departments.source\n        and jobs_outline_unnested.department_id = greenhouse_job_departments.department_id\n        and jobs_outline_unnested.run_hash = greenhouse_job_departments.run_hash\n),\n\ndepartments_aggregated as (\n    select \n        id,\n        max(primary_department) as primary_department,\n        max(secondary_department) as secondary_department,\n        max(tertiary_department) as tertiary_department,\n        max(quaternary_department) quaternary_department\n    from outline_joined_to_depts\n    group by 1\n)\n\nselect distinct\n    outline_joined_to_depts.id,\n    outline_joined_to_depts.levergreen_id,\n    outline_joined_to_depts.created_date_utc,\n    outline_joined_to_depts.updated_date_utc,\n    outline_joined_to_depts.source,\n    outline_joined_to_depts.company_name,\n    outline_joined_to_depts.uses_existing,\n    outline_joined_to_depts.location,\n    outline_joined_to_depts.full_opening_link, \n    outline_joined_to_depts.opening_title,\n    outline_joined_to_depts.is_remote,\n    departments_aggregated.primary_department,\n    departments_aggregated.secondary_department,\n    departments_aggregated.tertiary_department,\n    departments_aggregated.quaternary_department,\n    outline_joined_to_depts.run_hash,\n    outline_joined_to_depts.job_board\nfrom outline_joined_to_depts\ninner join departments_aggregated on outline_joined_to_depts.id = departments_aggregated.id", "relation_name": "\"postgres\".\"public\".\"int_greenhouse_departments_expanded_with_outline\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-02T12:13:25.807390Z", "completed_at": "2024-12-02T12:13:25.811765Z"}, {"name": "execute", "started_at": "2024-12-02T12:13:25.812232Z", "completed_at": "2024-12-02T12:13:58.195018Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 32.38929724693298, "adapter_response": {"_message": "SELECT 392416", "code": "SELECT", "rows_affected": 392416}, "message": "SELECT 392416", "failures": null, "unique_id": "model.levergreen_dbt.int_lever_departments_expanded", "compiled": true, "compiled_code": "with lever_jobs_outline as (\n    select * from \"postgres\".\"public\".\"stg_lever__jobs_outline\"\n),\n\njobs_outline_unnested as (\n    select\n        lever_jobs_outline.id,\n        lever_jobs_outline.levergreen_id,\n        lever_jobs_outline.created_date_utc,\n        lever_jobs_outline.updated_date_utc,\n        lever_jobs_outline.source,\n        lever_jobs_outline.uses_existing,\n        lever_jobs_outline.raw_html_file_location,\n        lever_jobs_outline.run_hash,\n        lever_jobs_outline.location,\n        lever_jobs_outline.full_opening_link, \n        lever_jobs_outline.opening_title,\n        lever_jobs_outline.workplace_type = 'Remote' as is_remote,\n        lever_jobs_outline.company_name,\n        lever_jobs_outline.job_board,\n        trim(department_ids_unnested.department_name) as department_name,\n        department_ids_unnested.department_level\n    from lever_jobs_outline, unnest(string_to_array(lever_jobs_outline.department_names, U&'\\2013')) with ordinality as department_ids_unnested(department_name, department_level)\n    --uses unicode character for dash from lever, different than normal dash. Normal: -, Lever: \u2013.\n),\n\ndepartments_aggregated as (\n    select \n        id,\n        max(case when department_level = 1 then department_name end) as primary_department,\n        max(case when department_level = 2 then department_name end) as secondary_department,\n        max(case when department_level = 3 then department_name end) as tertiary_department,\n        max(case when department_level = 4 then department_name end) as quaternary_department\n    from jobs_outline_unnested\n    group by 1\n)\n\nselect distinct\n    jobs_outline_unnested.id,\n    jobs_outline_unnested.levergreen_id,\n    jobs_outline_unnested.created_date_utc,\n    jobs_outline_unnested.updated_date_utc,\n    jobs_outline_unnested.source,\n    jobs_outline_unnested.company_name,\n    jobs_outline_unnested.uses_existing,\n    jobs_outline_unnested.location,\n    jobs_outline_unnested.full_opening_link, \n    jobs_outline_unnested.opening_title,\n    jobs_outline_unnested.is_remote,\n    departments_aggregated.primary_department,\n    departments_aggregated.secondary_department,\n    departments_aggregated.tertiary_department,\n    departments_aggregated.quaternary_department,\n    jobs_outline_unnested.run_hash,\n    jobs_outline_unnested.job_board\nfrom jobs_outline_unnested\ninner join departments_aggregated on jobs_outline_unnested.id = departments_aggregated.id", "relation_name": "\"postgres\".\"public\".\"int_lever_departments_expanded\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-02T12:13:58.200190Z", "completed_at": "2024-12-02T12:13:58.205452Z"}, {"name": "execute", "started_at": "2024-12-02T12:13:58.205922Z", "completed_at": "2024-12-02T12:14:27.285384Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 29.08682942390442, "adapter_response": {"_message": "SELECT 553423", "code": "SELECT", "rows_affected": 553423}, "message": "SELECT 553423", "failures": null, "unique_id": "model.levergreen_dbt.all_job_postings", "compiled": true, "compiled_code": "with all_postings as (\n    select * from \"postgres\".\"public\".\"int_greenhouse_departments_expanded_with_outline\"\n    union all\n    select * from \"postgres\".\"public\".\"int_lever_departments_expanded\"\n    union all\n    select * from \"postgres\".\"public\".\"int_ashby_outline_finalized\"\n    -- union all\n    -- select * from \"postgres\".\"public\".\"stg_rippling__jobs_outline\"\n),\n\nget_earliest_and_latest_dates as (\n    select\n        full_opening_link,\n        min(created_date_utc) as earliest_opening_date,\n        max(created_date_utc) as latest_opening_date\n    from all_postings\n    group by 1\n),\n\nall_postings_with_earliest_and_latest as (\n    select \n        all_postings.*, \n        date(timezone('utc', now())) = all_postings.created_date_utc as is_active,\n        earliest_and_latest.earliest_opening_date,\n        earliest_and_latest.latest_opening_date,\n        earliest_and_latest.latest_opening_date - earliest_and_latest.earliest_opening_date + 1 as days_active\n    from all_postings\n    inner join get_earliest_and_latest_dates as earliest_and_latest on all_postings.full_opening_link = earliest_and_latest.full_opening_link\n)\n\nselect *,\n    case\n        when not is_active then 'Inactive'\n        when days_active > 90 then 'Stale'\n        when days_active > 60 then 'Old'\n        when days_active > 30 then 'Medium'\n        when days_active > 7  then 'Recent'\n    else 'New'\n    end as posting_length_category,\n    case\n        when lower(primary_department) like '%data%' \n            or lower(primary_department) like '%analytics%'\n            or lower(secondary_department) like '%data%' \n            or lower(secondary_department) like '%analytics%'\n            or lower(opening_title) like '%data%' \n            or lower(opening_title) like '%analytics%'\n            then 'Data'\n        when lower(primary_department) like '%engineer%' \n            or lower(secondary_department) like '%engineer%' \n            or lower(opening_title) like '%engineer%' \n            then 'Software Engineering'\n        when lower(primary_department) like '%sales%' \n            or lower(secondary_department) like '%sales%' \n            or lower(opening_title) like '%sales%' \n            or lower(opening_title) like '%account executive'\n            then 'Sales'\n        when lower(primary_department) like '%finance%' \n            or lower(primary_department) like '%accounting%' \n            or lower(secondary_department) like '%finance%' \n            or lower(secondary_department) like '%accounting%' \n            or lower(opening_title) like '%finance%'\n            or lower(opening_title) like '%accounting%' \n            then 'Finance & Accounting'\n        when lower(primary_department) like '%operations%' \n            or lower(secondary_department) like '%operations%' \n            or lower(opening_title) like '%operations%' \n            then 'Operations'\n        when lower(primary_department) like '%product%' \n            or lower(secondary_department) like '%product%' \n            or lower(opening_title) like '%product%'\n            then 'Product'\n        else 'Other'\n    end as opening_category\nfrom all_postings_with_earliest_and_latest", "relation_name": "\"postgres\".\"core\".\"all_job_postings\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-02T12:14:27.290767Z", "completed_at": "2024-12-02T12:14:27.294885Z"}, {"name": "execute", "started_at": "2024-12-02T12:14:27.295350Z", "completed_at": "2024-12-02T12:14:35.455595Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 8.166566610336304, "adapter_response": {"_message": "SELECT 50222", "code": "SELECT", "rows_affected": 50222}, "message": "SELECT 50222", "failures": null, "unique_id": "model.levergreen_dbt.active_job_postings", "compiled": true, "compiled_code": "select * from \"postgres\".\"core\".\"all_job_postings\" where is_active", "relation_name": "\"postgres\".\"core\".\"active_job_postings\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-02T12:14:35.462850Z", "completed_at": "2024-12-02T12:14:35.471962Z"}, {"name": "execute", "started_at": "2024-12-02T12:14:35.472589Z", "completed_at": "2024-12-02T12:14:36.784978Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.3252055644989014, "adapter_response": {"_message": "SELECT 17", "code": "SELECT", "rows_affected": 17}, "message": "SELECT 17", "failures": null, "unique_id": "model.levergreen_dbt.active_job_postings_default", "compiled": true, "compiled_code": "select active_job_postings.* from \"postgres\".\"core\".\"active_job_postings\" active_job_postings\ninner join \"postgres\".\"public\".\"job_board_urls\" job_board_urls \n    on active_job_postings.source = job_board_urls.company_url\nwhere job_board_urls.id <= 22", "relation_name": "\"postgres\".\"core\".\"active_job_postings_default\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-02T12:14:35.468005Z", "completed_at": "2024-12-02T12:14:35.477674Z"}, {"name": "execute", "started_at": "2024-12-02T12:14:35.478581Z", "completed_at": "2024-12-02T12:14:36.832434Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.3708469867706299, "adapter_response": {"_message": "SELECT 0", "code": "SELECT", "rows_affected": 0}, "message": "SELECT 0", "failures": null, "unique_id": "model.levergreen_dbt.active_job_postings_prospect", "compiled": true, "compiled_code": "select active_job_postings.* from \"postgres\".\"core\".\"active_job_postings\" active_job_postings\ninner join \"postgres\".\"public\".\"job_board_urls\" job_board_urls \n    on active_job_postings.source = job_board_urls.company_url\nwhere job_board_urls.is_prospect", "relation_name": "\"postgres\".\"core\".\"active_job_postings_prospect\""}], "elapsed_time": 91.17416620254517, "args": {"macro_debugging": false, "send_anonymous_usage_stats": true, "defer": false, "printer_width": 80, "partial_parse_file_diff": true, "log_level_file": "debug", "enable_legacy_logger": false, "profiles_dir": "/home/runner/work/job-board-scraper/job-board-scraper/levergreen_dbt", "warn_error_options": {"include": [], "exclude": []}, "show_resource_report": false, "log_file_max_bytes": 10485760, "vars": {}, "source_freshness_run_project_hooks": false, "indirect_selection": "eager", "introspect": true, "quiet": false, "use_colors": true, "log_path": "/home/runner/work/job-board-scraper/job-board-scraper/levergreen_dbt/logs", "require_explicit_package_overrides_for_builtin_materializations": true, "which": "run", "select": [], "require_resource_names_without_spaces": false, "empty": false, "use_colors_file": true, "favor_state": false, "strict_mode": false, "project_dir": "/home/runner/work/job-board-scraper/job-board-scraper/levergreen_dbt", "cache_selected_only": false, "partial_parse": true, "print": true, "version_check": true, "write_json": true, "populate_cache": true, "invocation_command": "dbt run", "static_parser": true, "log_level": "info", "exclude": [], "log_format_file": "debug", "log_format": "default"}}